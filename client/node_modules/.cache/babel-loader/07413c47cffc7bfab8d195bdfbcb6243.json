{"ast":null,"code":"var _jsxFileName = \"/Users/rs-dev/Desktop/Self-Projects/Udemy-ApolloGraphQL/client/src/index.js\";\nimport React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\nimport Navbar from './components/Navbar';\nimport withSession from './components/withSession';\nimport Signin from \"./components/Auth/Signin\";\nimport Signup from \"./components/Auth/Signup\";\nimport Search from './components/Recipe/Search';\nimport AddRecipe from './components/Recipe/AddRecipe';\nimport Profile from './components/Profile/Profile';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token\n      }\n    });\n  },\n  onError: ({\n    networkError\n  }) => {\n    if (networkError) {\n      console.log('Network Error', networkError); // if (networkError.statusCode === 401){\n      //   localStorage.removeItem('token')\n      // }\n    }\n  }\n});\n\nconst Root = ({\n  refetch\n}) => /*#__PURE__*/React.createElement(Router, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Navbar, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Switch, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Route, {\n  path: \"/\",\n  exact: true,\n  component: App,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/search\",\n  component: Search,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/signin\",\n  render: () => /*#__PURE__*/React.createElement(Signin, {\n    refetch: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Route, {\n  path: \"/signup\",\n  render: () => /*#__PURE__*/React.createElement(Signup, {\n    refetch: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Redirect, {\n  to: \"/\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }\n}))));\n\nconst RootWithSession = withSession(Root);\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(RootWithSession, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 8\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/rs-dev/Desktop/Self-Projects/Udemy-ApolloGraphQL/client/src/index.js"],"names":["React","Fragment","ReactDOM","BrowserRouter","Router","Route","Switch","Redirect","App","Navbar","withSession","Signin","Signup","Search","AddRecipe","Profile","ApolloClient","ApolloProvider","client","uri","fetchOptions","credentials","request","operation","token","localStorage","getItem","setContext","headers","authorization","onError","networkError","console","log","Root","refetch","RootWithSession","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './components/App';\n\nimport Navbar from './components/Navbar';\nimport withSession from './components/withSession';\nimport Signin from \"./components/Auth/Signin\";\nimport Signup from \"./components/Auth/Signup\";\nimport Search from './components/Recipe/Search';\nimport AddRecipe from './components/Recipe/AddRecipe';\nimport Profile from './components/Profile/Profile';\n\n\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\n\n\n\n\nconst client = new ApolloClient({\n  uri : 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: 'include'\n  },\n  request: operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token \n      }\n    })\n  },\n  onError : ({ networkError}) => {\n    if(networkError) { \n      console.log('Network Error', networkError);\n   \n    // if (networkError.statusCode === 401){\n    //   localStorage.removeItem('token')\n    // }\n    }\n  }\n})\n\nconst Root = ({ refetch }) => (\n  <Router>\n    <Navbar/>\n    <Fragment>\n      <Switch>\n        <Route path=\"/\" exact component={App} />\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/signin\" \n          render={ () => \n            <Signin refetch={refetch}/> \n          }/>\n        <Route path=\"/signup\" \n         render={ () => \n          <Signup refetch={refetch}/> \n          }/>\n        <Redirect to=\"/\" />\n      </Switch>\n    </Fragment>\n  </Router>\n)\n\nconst RootWithSession = withSession(Root);\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n       <RootWithSession />\n    </ApolloProvider>\n   ,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}